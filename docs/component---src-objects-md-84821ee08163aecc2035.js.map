{"version":3,"sources":["webpack:///../src/objects.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mfAMO,IAAMA,EAAe,Q,gMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,WADR,WAGA,iBAAQ,CACN,GAAM,qBADR,qBAGA,yFACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,oKAOL,2IACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iGAML,kDAAiC,0BAAYA,WAAW,KAAvB,uBAAjC,mDAAoJ,0BAAYA,WAAW,KAAvB,KAApJ,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,kGAOL,wEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,uHAML,6EAA4D,0BAAYA,WAAW,KAAvB,KAA5D,aACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oKAOL,sEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qMAkBL,iBAAQ,CACN,GAAM,yBADR,yBAGA,4FACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,yDAIL,gGAA+E,0BAAYA,WAAW,KAAvB,KAA/E,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wGAKL,mHACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qKAiBL,iBAAQ,CACN,GAAM,iBADR,iBAGA,+HACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4H,8LAiBTJ,EAAWK,gBAAiB","file":"component---src-objects-md-84821ee08163aecc2035.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/rudiyardley/projects/pdsl/pdsl/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"objects\"\n    }}>{`Objects`}</h1>\n    <h2 {...{\n      \"id\": \"object-properties\"\n    }}>{`Object properties`}</h2>\n    <p>{`You can test for an object's properties using the object syntax:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const validate = p\\`{ name: string }\\`; // value && typeof value.name === 'string';\n\nvalidate({ name: \"Hello\" }); // true\nvalidate({ name: 20 }); // false\n`}</code></pre>\n    <p>{`As a shorthand you can test for an object property's existence by simply providing an object with a name property.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const validate = p\\`{ name }\\`;\nvalidate({ name: \"Rudi\" }); // true\nvalidate({}); // false\n`}</code></pre>\n    <p>{`This is the same as using `}<inlineCode parentName=\"p\">{`!(null | undefined)`}</inlineCode>{` which is also the same as using the shorthand: `}<inlineCode parentName=\"p\">{`_`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// These are all equivalent\np\\`{ name }\\`;\np\\`{ name: _ }\\`;\np\\`{ name: !(null|undefined) }\\`;\n`}</code></pre>\n    <p>{`You can use literal strings as property checks.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const validate = p\\`{ name: \"Rudi\" }\\`;\nvalidate({ name: \"Rudi\" }); // true\nvalidate({ name: \"Fred\" }); // false\n`}</code></pre>\n    <p>{`Or even provide a list of possible strings using the `}<inlineCode parentName=\"p\">{`|`}</inlineCode>{` operator`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const validate = p\\`{ name: \"Rudi\" | \"Fred\" }\\`;\nvalidate({ name: \"Rudi\" }); // true\nvalidate({ name: \"Fred\" }); // true\nvalidate({ name: \"Mary\" }); // true\n`}</code></pre>\n    <p>{`The property can also contain nested objects.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const validate = p\\`{ \n  name, \n  payload: {\n    listening: true,\n    num: > 4\n  } \n}\\`;\n\nvalidate({\n  name: \"Hello\",\n  payload: {\n    listening: true,\n    num: 5\n  }\n}); // true\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"exact-matching-syntax\"\n    }}>{`Exact matching syntax`}</h2>\n    <p>{`PDSL is loose matches objects by default which means the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`p\\`{ name }\\`({ name: \"A name\", age: 234 }); // true\n`}</code></pre>\n    <p>{`Exact object matching mode can be turned on by using objects with pipes `}<inlineCode parentName=\"p\">{`|`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`p\\`{| name |}\\`({ name: \"A name\", age: 234 }); // false\np\\`{| name |}\\`({ name: \"A name\" }); // true\n`}</code></pre>\n    <p>{`All nested normal objects will become exact matching too within the exact matching tokens:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`p\\`{|\n    name,\n    age,\n    sub: {\n      num: 100\n    }\n  |}\\`({\n  name: \"Fred\",\n  age: 12,\n  sub: {\n    num: 100,\n    foo: \"foo\"\n  }\n}); // false\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"rest-operator\"\n    }}>{`Rest operator`}</h2>\n    <p>{`Once you turn exact matching on in an object tree you can only turn it off by using the rest operator:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`p\\`{| \n  name: \"foo\",\n  exact: {\n    hello:\"hello\"\n  }\n  loose: {\n    hello: \"hello\",\n    ...\n  },\n|}\\`;\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}