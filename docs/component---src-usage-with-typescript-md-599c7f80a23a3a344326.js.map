{"version":3,"sources":["webpack:///../src/usage-with-typescript.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"qfAMO,IAAMA,EAAe,Q,8MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,yBADR,yBAGA,+OACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,mhB,4MAmCTJ,EAAWK,gBAAiB","file":"component---src-usage-with-typescript-md-599c7f80a23a3a344326.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/rudiyardley/projects/pdsl/pdsl/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"usage-with-typescript\"\n    }}>{`Usage with TypeScript`}</h1>\n    <p>{`PDSL is really quite useful in TypeScript as guard functions are important to a good type management strategy. To use in TypeScript simply pass in the guard type you want your predicate to determine as a type prop.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import p from \"pdsl\";\n\n// pass in string\nconst isString = p<string>\\`string\\`;\n\ntype User = {\n  name: string;\n  password: string;\n};\n\n// pass in User\nconst isUser = p<User>\\`{\n  name: string[3..8],\n  password: string[>5]\n}\\`;\n\nfunction doStuff(input: string | User) {\n  // input is either string or User\n  if (isString(input)) {\n    // input is now considered a string\n    return input.toLowerCase();\n  }\n\n  if (isUser(input)) {\n    // input is now considered a User\n    return input.name;\n  }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}