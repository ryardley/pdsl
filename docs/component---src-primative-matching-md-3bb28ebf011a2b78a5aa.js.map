{"version":3,"sources":["webpack:///../src/primative-matching.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"qfAMO,IAAMA,EAAe,Q,2MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,sBADR,sBAGA,8GACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,6eAWL,+HACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oSAQL,gHACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,kNAUL,4FACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,sM,yMAUTJ,EAAWK,gBAAiB","file":"component---src-primative-matching-md-3bb28ebf011a2b78a5aa.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/rudiyardley/projects/pdsl/pdsl/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"primitive-matching\"\n    }}>{`Primitive matching`}</h1>\n    <p>{`If you pass a JavaScript primitive object, you will get the appropriate typeof check.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const isNumeric = p\\`Number\\`; // typeof value === 'number'\nconst isBoolean = p\\`Boolean\\`; // typeof value === 'boolean'\nconst isString = p\\`String\\`; // typeof value === 'string'\nconst isSymbol = p\\`Symbol\\`; // typeof value === 'symbol'\nconst isArray = p\\`Array\\`; // Array.isArray(value)\nconst isObject = p\\`Object\\`; // typeof value === 'object'\nconst isFunction = p\\`Function\\`; // typeof value === 'function'\n// const isBigInt = p\\`BigInt\\`;// BigInt will be coming soon once standardised\n`}</code></pre>\n    <p>{`For consistency with typesystems such as TypeScript and Flow you can use lower case for the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const isNumeric = p\\`number\\`; // typeof value === 'number'\nconst isBoolean = p\\`boolean\\`; // typeof value === 'boolean'\nconst isString = p\\`string\\`; // typeof value === 'string'\nconst isSymbol = p\\`symbol\\`; // typeof value === 'symbol'\nconst isArray = p\\`array\\`; // Array.isArray(value)\n`}</code></pre>\n    <p>{`You can test both the type and length of strings and arrays by using the length syntax:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`p\\`string[5]\\`(\"12345\"); // true\np\\`string[5]\\`(\"1234\"); // false\np\\`string[<5]\\`(\"1234\"); // true\n\np\\`array[5]\\`(1, 2, 3, 4, 5); // true\np\\`array[5]\\`(1, 2, 3, 4); // false\np\\`array[<5]\\`(1, 2, 3, 4); // true\n`}</code></pre>\n    <p>{`You can also pass in a JavaScript primitive to the template string.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const isNumeric = p\\`\\${Number}\\`; // typeof value === 'number'\nconst isBoolean = p\\`\\${Boolean}\\`; // typeof value === 'boolean'\nconst isString = p\\`\\${String}\\`; // typeof value === 'string'\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}